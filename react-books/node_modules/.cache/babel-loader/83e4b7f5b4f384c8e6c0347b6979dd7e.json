{"ast":null,"code":"\"use strict\";\n/**\n * Module dependencies.\n */\n\nvar utils = require('./utils');\n/**\n * Expose `ResponseBase`.\n */\n\n\nmodule.exports = ResponseBase;\n/**\n * Initialize a new `ResponseBase`.\n *\n * @api public\n */\n\nfunction ResponseBase() {}\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\n\nResponseBase.prototype.get = function (field) {\n  return this.header[field.toLowerCase()];\n};\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\n\nResponseBase.prototype._setHeaderProperties = function (header) {\n  // TODO: moar!\n  // TODO: make this a util\n  // content-type\n  var ct = header['content-type'] || '';\n  this.type = utils.type(ct); // params\n\n  var parameters = utils.params(ct);\n\n  for (var key in parameters) {\n    if (Object.prototype.hasOwnProperty.call(parameters, key)) this[key] = parameters[key];\n  }\n\n  this.links = {}; // links\n\n  try {\n    if (header.link) {\n      this.links = utils.parseLinks(header.link);\n    }\n  } catch (_unused) {// ignore\n  }\n};\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\n\nResponseBase.prototype._setStatusProperties = function (status) {\n  var type = Math.trunc(status / 100); // status / class\n\n  this.statusCode = status;\n  this.status = this.statusCode;\n  this.statusType = type; // basics\n\n  this.info = type === 1;\n  this.ok = type === 2;\n  this.redirect = type === 3;\n  this.clientError = type === 4;\n  this.serverError = type === 5;\n  this.error = type === 4 || type === 5 ? this.toError() : false; // sugar\n\n  this.created = status === 201;\n  this.accepted = status === 202;\n  this.noContent = status === 204;\n  this.badRequest = status === 400;\n  this.unauthorized = status === 401;\n  this.notAcceptable = status === 406;\n  this.forbidden = status === 403;\n  this.notFound = status === 404;\n  this.unprocessableEntity = status === 422;\n};","map":{"version":3,"mappings":"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","names":["utils","require","module","exports","ResponseBase","prototype","get","field","header","toLowerCase","_setHeaderProperties","ct","type","parameters","params","key","Object","hasOwnProperty","call","links","link","parseLinks","_setStatusProperties","status","Math","trunc","statusCode","statusType","info","ok","redirect","clientError","serverError","error","toError","created","accepted","noContent","badRequest","unauthorized","notAcceptable","forbidden","notFound","unprocessableEntity"],"sources":["/home/dinhnghia/Desktop/web_blog_ofme/management-book-app/react-books/node_modules/superagent/src/response-base.js"],"sourcesContent":["/**\n * Module dependencies.\n */\n\nconst utils = require('./utils');\n\n/**\n * Expose `ResponseBase`.\n */\n\nmodule.exports = ResponseBase;\n\n/**\n * Initialize a new `ResponseBase`.\n *\n * @api public\n */\n\nfunction ResponseBase() {}\n\n/**\n * Get case-insensitive `field` value.\n *\n * @param {String} field\n * @return {String}\n * @api public\n */\n\nResponseBase.prototype.get = function (field) {\n  return this.header[field.toLowerCase()];\n};\n\n/**\n * Set header related properties:\n *\n *   - `.type` the content type without params\n *\n * A response of \"Content-Type: text/plain; charset=utf-8\"\n * will provide you with a `.type` of \"text/plain\".\n *\n * @param {Object} header\n * @api private\n */\n\nResponseBase.prototype._setHeaderProperties = function (header) {\n  // TODO: moar!\n  // TODO: make this a util\n\n  // content-type\n  const ct = header['content-type'] || '';\n  this.type = utils.type(ct);\n\n  // params\n  const parameters = utils.params(ct);\n  for (const key in parameters) {\n    if (Object.prototype.hasOwnProperty.call(parameters, key))\n      this[key] = parameters[key];\n  }\n\n  this.links = {};\n\n  // links\n  try {\n    if (header.link) {\n      this.links = utils.parseLinks(header.link);\n    }\n  } catch {\n    // ignore\n  }\n};\n\n/**\n * Set flags such as `.ok` based on `status`.\n *\n * For example a 2xx response will give you a `.ok` of __true__\n * whereas 5xx will be __false__ and `.error` will be __true__. The\n * `.clientError` and `.serverError` are also available to be more\n * specific, and `.statusType` is the class of error ranging from 1..5\n * sometimes useful for mapping respond colors etc.\n *\n * \"sugar\" properties are also defined for common cases. Currently providing:\n *\n *   - .noContent\n *   - .badRequest\n *   - .unauthorized\n *   - .notAcceptable\n *   - .notFound\n *\n * @param {Number} status\n * @api private\n */\n\nResponseBase.prototype._setStatusProperties = function (status) {\n  const type = Math.trunc(status / 100);\n\n  // status / class\n  this.statusCode = status;\n  this.status = this.statusCode;\n  this.statusType = type;\n\n  // basics\n  this.info = type === 1;\n  this.ok = type === 2;\n  this.redirect = type === 3;\n  this.clientError = type === 4;\n  this.serverError = type === 5;\n  this.error = type === 4 || type === 5 ? this.toError() : false;\n\n  // sugar\n  this.created = status === 201;\n  this.accepted = status === 202;\n  this.noContent = status === 204;\n  this.badRequest = status === 400;\n  this.unauthorized = status === 401;\n  this.notAcceptable = status === 406;\n  this.forbidden = status === 403;\n  this.notFound = status === 404;\n  this.unprocessableEntity = status === 422;\n};\n"]},"metadata":{},"sourceType":"script"}